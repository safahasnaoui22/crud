{"version":3,"sources":["index.js"],"names":["express","require","mongoose","cors","UserModel","connect","then","console","log","err","app","use","json","get","req","res","find","users","id","params","findById","_id","findByIdAndDelete","user","status","error","message","put","findByIdAndUpdate","name","body","email","age","post","create","listen"],"mappings":"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","sourcesContent":["const express = require ('express')\r\nconst mongoose = require('mongoose')\r\nconst cors = require('cors')\r\nconst UserModel = require('./models/Users')\r\nmongoose\r\n  .connect(\"mongodb+srv://crud2:crud2@cluster0.z96irs3.mongodb.net/\")\r\n  .then(() => {\r\n    console.log(\"connected to mongoDB\");\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nconst app = express ()\r\napp.use(cors())\r\napp.use(express.json())\r\n\r\napp.get('/' , (req , res) => {\r\n  UserModel.find({})\r\n  .then(users => res.json(users))\r\n  .catch(err => res.json(err))\r\n})\r\n\r\n\r\napp.get('/getUser/:id' , (req , res) => {\r\n  const id = req.params.id;\r\n  UserModel.findById({_id:id})\r\n  .then(users => res.json(users))\r\n  .catch(err => res.json(err))\r\n})\r\n\r\napp.delete('/deleteUser/:id', (req, res) => {\r\n  const id = req.params.id;\r\n  UserModel.findByIdAndDelete(id)\r\n    .then(user => {\r\n      if (!user) {\r\n        return res.status(404).json({ error: 'User not found' });\r\n      }\r\n      res.json({ message: 'User deleted successfully', user });\r\n    })\r\n    .catch(err => res.status(500).json({ error: err.message }));\r\n});\r\n\r\n\r\napp.put('/updateUser/:id', (req, res) => {\r\n  const id = req.params.id;\r\n  UserModel.findByIdAndUpdate(id, {\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    age: req.body.age\r\n  }, { new: true })\r\n    .then(user => res.json(user))\r\n    .catch(err => res.json(err));\r\n});\r\n\r\n\r\napp.post(\"/createUser\" , (req , res) => {\r\n    UserModel.create(req.body)\r\n    .then(users => res.json(users))\r\n    .catch(err => res.json(err))\r\n})\r\n\r\napp.listen(3000, () => {\r\n    console.log(\"Server listening on port 3000\");\r\n  });"],"file":"index.dev.js"}